apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply from: 'https://raw.github.com/gist/1527604/4080ebed7b141d10610825aebd70942fcd301105/emma.gradle'
apply plugin: 'findbugs'

project.group = 'de.prob'
sourceCompatibility = 1.6
def gradle_version = '1.0-rc-3'

project.version = '2.0.0-milestone-4-SNAPSHOT'

repositories {
    maven {
      name "cobra"
      url "http://cobra.cs.uni-duesseldorf.de/artifactory/repo"
    } 
}


tasks.withType(FindBugs){
ignoreFailures = true
}

configurations.all {
      resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


def  ft = findbugsMain.classes
ft.exclude '**/org/codehaus/groovy/tools/shell/*','**/SpockDomWalkerTest.class',"**/de/prob/scripting/Downloader*.class","**/de/prob/scripting/InteractiveCommand*.class"
findbugsMain.classes = files(ft.files) // explicit list of files

def  ftc = findbugsTest.classes
ftc.exclude '**/SpockDomWalkerTest*'
findbugsTest.classes = files(ftc.files) // explicit list of files


sourceSets.main.java.srcDirs = ['src/main/generated'] // ie there's no stand-alone java source
sourceSets.main.groovy.srcDir 'src/main/java' // ie include the 'java' dir as groovy source

def parser_version = '2.4.6-SNAPSHOT'

dependencies {

	groovy 'org.codehaus.groovy:groovy:1.8.5'

	compile 'com.google.guava:guava:r09'
	compile 'commons-cli:commons-cli:1.2'

	compile 'org.codehaus.groovy:groovy:1.8.5'
	compile 'org.fusesource.jansi:jansi:1.5'
	compile 'jline:jline:0.9.94'


 compile group: "de.prob", name: "answerparser", version: parser_version , changing: true
 compile group: "de.prob", name: "bparser", version: parser_version , changing: true
 compile group: "de.prob", name: "cliparser", version: parser_version , changing: true
 compile group: "de.prob", name: "ltlparser", version: parser_version , changing: true
 compile group: "de.prob", name: "parserbase", version: parser_version , changing: true
 compile group: "de.prob", name: "prologlib", version: parser_version , changing: true
 compile group: "de.prob", name: "unicode", version: parser_version , changing: true

	compile 'com.google.inject:guice:3.0'
	compile 'com.google.inject.extensions:guice-assistedinject:3.0'
	compile 'org.slf4j:slf4j-api:1.6.1'
	compile 'ch.qos.logback:logback-core:0.9.29'
	compile 'ch.qos.logback:logback-classic:0.9.29'
	
	compile 'jgrapht:jgrapht:0.8.3'
	compile 'jgraphx:jgraphx:1.10.1.0'
	
	testCompile 'junit:junit:4.8.2'
	testCompile 'org.mockito:mockito-core:1.8.5'
	testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
	
	compile 'xstream:xstream:1.2.2'
	compile 'stax:stax:1.2.0_rc2-dev'
	compile 'org.codehaus.jettison:jettison:1.3.1'
	compile 'org.reflections:reflections:0.9.8'
	compile 'emf:ecore:2.3.0'
	compile 'emf:common:2.3.0'
	compile 'emf:xmi:2.7.0'

	 compile 'commons-codec:commons-codec:1.6'
	
	
}

task createBuildConstants  {
	doFirst {
		def buildconstants_class = """
version=${project.version}"""
		File f = file("src/main/resources/build.properties")
		f.delete()
		f <<  buildconstants_class
	}
}

compileJava {
	dependsOn= [createBuildConstants]
}

jar {
	from sourceSets.main.allJava
 }

task pack(type: Jar, dependsOn: [jar]) {
	baseName = project.name + '-standalone'
	def deps = configurations.runtime + configurations.archives.allArtifacts.files
	def depClasses = {
		deps.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	from(depClasses) {
		excludes= ['META-INF/*.MF','META-INF/*.SF'] 
	}
	manifest {
		attributes 'Main-Class': 'de.prob.Main'
	}
	doLast{
		println "Created archive: "+archivePath
	}
}

task deploy(dependsOn: [jar, test,javadoc,pack], group: 'Build') {
	description = 'Assembles the uberjar, runs all tests and builds the javadoc.'
}


test.doFirst {
	systemProperties['integrationtest'] = 'true'
}

javadoc {
	title="ProB Core "+project.version
	options.tags = ["ordered", "model", "generated"]
}

task wrapper(type: Wrapper) {
    gradleVersion = gradle_version
}

def download(address,target) {
	def file = new FileOutputStream(target)
	def out = new BufferedOutputStream(file)
	out << new URL(address).openStream()
	out.close()
}

public  String getProBDirectory() {
		String homedir = System.getProperty("prob.home");
		if (homedir != null)
			return homedir + java.io.File.separator;
		String env = System.getenv("PROB_HOME");
		if (env != null)
			return env + java.io.File.separator;
		return System.getProperty("user.home") + java.io.File.separator + ".prob"
				+ java.io.File.separator;
	}


task downloadCli << {
		os = System.getProperty("os.name")
		if (os.indexOf("nix") < 0 && os.indexOf("nux") < 0)
			System.err.println("\n!!\tError: CLI download for linux only\n")
		dir = getProBDirectory();
		delete file(dir)
	    new File(dir).mkdirs() 
		targetdir = dir
		targetzip = dir+"probcli_linux.zip"
		url = "http://nightly.cobra.cs.uni-duesseldorf.de/cli/probcli_linux.zip"
		download(url,targetzip)
	    FileTree zip = zipTree(targetzip)
	    copy {
		   from zip
		   into targetdir
	    }
		delete file(targetzip)
}


task integrationtests(dependsOn: ['classes','downloadCli'], type:JavaExec){
	main = 'de.prob.Main'
	classpath = sourceSets.main.runtimeClasspath
	args = ['-test','groovyTests']
}






